=== tests/cases/conformance/directives/ts-expect-error.ts ===
// @ts-expect-error additional commenting
var invalidCommentedFancy: number = 'nope';
>invalidCommentedFancy : Symbol(invalidCommentedFancy, Decl(ts-expect-error.ts, 1, 3))

// @ts-expect-error additional commenting
var validCommentedFancy: string = 'nope';
>validCommentedFancy : Symbol(validCommentedFancy, Decl(ts-expect-error.ts, 4, 3))

// @ts-expect-error
var invalidCommentedPlain: number = 'nope';
>invalidCommentedPlain : Symbol(invalidCommentedPlain, Decl(ts-expect-error.ts, 7, 3))

// @ts-expect-error
var validCommentedPlain: string = 'nope';
>validCommentedPlain : Symbol(validCommentedPlain, Decl(ts-expect-error.ts, 10, 3))

var invalidPlain: number = 'nope';
>invalidPlain : Symbol(invalidPlain, Decl(ts-expect-error.ts, 12, 3))

var validPlain: string = 'nope';
>validPlain : Symbol(validPlain, Decl(ts-expect-error.ts, 14, 3))

// @ts-expect-error
(({ a: true } as const).a === false); // <-- compiles (as expected via comment)
>({ a: true } as const).a : Symbol(a, Decl(ts-expect-error.ts, 17, 3))
>a : Symbol(a, Decl(ts-expect-error.ts, 17, 3))
>a : Symbol(a, Decl(ts-expect-error.ts, 17, 3))

(({ a: true } as const).a === false); // Should error
>({ a: true } as const).a : Symbol(a, Decl(ts-expect-error.ts, 18, 3))
>a : Symbol(a, Decl(ts-expect-error.ts, 18, 3))
>a : Symbol(a, Decl(ts-expect-error.ts, 18, 3))

(({ a: true } as const).a === false); // error
>({ a: true } as const).a : Symbol(a, Decl(ts-expect-error.ts, 20, 3))
>a : Symbol(a, Decl(ts-expect-error.ts, 20, 3))
>a : Symbol(a, Decl(ts-expect-error.ts, 20, 3))

(({ a: true } as const).a === false); // error
>({ a: true } as const).a : Symbol(a, Decl(ts-expect-error.ts, 21, 3))
>a : Symbol(a, Decl(ts-expect-error.ts, 21, 3))
>a : Symbol(a, Decl(ts-expect-error.ts, 21, 3))

