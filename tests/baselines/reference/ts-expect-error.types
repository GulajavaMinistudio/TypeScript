=== tests/cases/conformance/directives/ts-expect-error.ts ===
// @ts-expect-error additional commenting
var invalidCommentedFancy: number = 'nope';
>invalidCommentedFancy : number
>'nope' : "nope"

// @ts-expect-error additional commenting
var validCommentedFancy: string = 'nope';
>validCommentedFancy : string
>'nope' : "nope"

// @ts-expect-error
var invalidCommentedPlain: number = 'nope';
>invalidCommentedPlain : number
>'nope' : "nope"

// @ts-expect-error
var validCommentedPlain: string = 'nope';
>validCommentedPlain : string
>'nope' : "nope"

var invalidPlain: number = 'nope';
>invalidPlain : number
>'nope' : "nope"

var validPlain: string = 'nope';
>validPlain : string
>'nope' : "nope"

// @ts-expect-error
(({ a: true } as const).a === false); // <-- compiles (as expected via comment)
>(({ a: true } as const).a === false) : boolean
>({ a: true } as const).a === false : boolean
>({ a: true } as const).a : true
>({ a: true } as const) : { readonly a: true; }
>{ a: true } as const : { readonly a: true; }
>{ a: true } : { readonly a: true; }
>a : true
>true : true
>a : true
>false : false

(({ a: true } as const).a === false); // Should error
>(({ a: true } as const).a === false) : boolean
>({ a: true } as const).a === false : boolean
>({ a: true } as const).a : true
>({ a: true } as const) : { readonly a: true; }
>{ a: true } as const : { readonly a: true; }
>{ a: true } : { readonly a: true; }
>a : true
>true : true
>a : true
>false : false

(({ a: true } as const).a === false); // error
>(({ a: true } as const).a === false) : boolean
>({ a: true } as const).a === false : boolean
>({ a: true } as const).a : true
>({ a: true } as const) : { readonly a: true; }
>{ a: true } as const : { readonly a: true; }
>{ a: true } : { readonly a: true; }
>a : true
>true : true
>a : true
>false : false

(({ a: true } as const).a === false); // error
>(({ a: true } as const).a === false) : boolean
>({ a: true } as const).a === false : boolean
>({ a: true } as const).a : true
>({ a: true } as const) : { readonly a: true; }
>{ a: true } as const : { readonly a: true; }
>{ a: true } : { readonly a: true; }
>a : true
>true : true
>a : true
>false : false

